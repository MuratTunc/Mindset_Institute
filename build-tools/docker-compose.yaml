version: '3.9'

services:
  user-service:
    build:
      context: ./../user-service
      dockerfile: ./../user-service/user-service.dockerfile
    image: ${USER_SERVICE_IMAGE_NAME}
    container_name: ${USER_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      user-db:
        condition: service_healthy  # Wait for DB to be ready
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    env_file:
      - .env  # Load environment variables
  
  customer-service:
    build:
      context: ./../customer-service
      dockerfile: ./../customer-service/customer-service.dockerfile
    image: ${CUSTOMER_SERVICE_IMAGE_NAME}
    container_name: ${CUSTOMER_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      customer-db:
        condition: service_healthy  # Wait for DB to be ready
    ports:
      - "${CUSTOMER_SERVICE_PORT}:${CUSTOMER_SERVICE_PORT}"
    env_file:
      - .env  # Load environment variables

  salestracking-service:
    build:
      context: ./../salestracking-service
      dockerfile: ./../salestracking-service/salestracking-service.dockerfile
    image: ${SALESTRACKING_SERVICE_IMAGE_NAME}
    container_name: ${SALESTRACKING_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      salestracking-db:
        condition: service_healthy  # Wait for DB to be ready
    ports:
      - "${SALESTRACKING_SERVICE_PORT}:${SALESTRACKING_SERVICE_PORT}"
    env_file:
      - .env  # Load environment variables           

  user-db:
    image: postgres:15
    container_name: user-db
    restart: always
    environment:
      POSTGRES_USER: ${USER_POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${USER_POSTGRES_DB_NAME}
    ports:
      - "${USER_POSTGRES_DB_PORT}:5432"
    healthcheck:  # Ensure PostgreSQL is ready before starting user-service
      test: ["CMD", "pg_isready", "-U", "${USER_POSTGRES_DB_USER}", "-d", "${USER_POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user_db_data:/var/lib/postgresql/data

  customer-db:
    image: postgres:15
    container_name: customer-db
    restart: always
    environment:
      POSTGRES_USER: ${CUSTOMER_POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${CUSTOMER_POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${CUSTOMER_POSTGRES_DB_NAME}
    ports:
      - "${CUSTOMER_POSTGRES_DB_PORT}:5432"
    healthcheck:  # Ensure PostgreSQL is ready before starting customer-service
      test: ["CMD", "pg_isready", "-U", "${CUSTOMER_POSTGRES_DB_USER}", "-d", "${CUSTOMER_POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - customer_db_data:/var/lib/postgresql/data

  salestracking-db:
    image: postgres:15
    container_name: salestracking-db
    restart: always
    environment:
      POSTGRES_USER: ${SALESTRACKING_POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${SALESTRACKING_POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${SALESTRACKING_POSTGRES_DB_NAME}
    ports:
      - "${SALESTRACKING_POSTGRES_DB_PORT}:5432"
    healthcheck:  # Ensure PostgreSQL is ready before starting salestracking-service
      test: ["CMD", "pg_isready", "-U", "${SALESTRACKING_POSTGRES_DB_USER}", "-d", "${SALESTRACKING_POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - salestracking_db_data:/var/lib/postgresql/data    

volumes:
  user_db_data:
  customer_db_data:
  salestracking_db_data:
